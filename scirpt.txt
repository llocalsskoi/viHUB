local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "CriminoJoke",
   Icon = 0,
   LoadingTitle = "CriminoJoke is loading! ((PLEASE WAIT))",
   LoadingSubtitle = "by Nefexx_",
   Theme = "Default",
   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = "CriminoJoke"
   }
})

local Main = Window:CreateTab("Main", "settings")
local Other = Window:CreateTab("Other", "area-chart")
local ScriptsTab = Window:CreateTab("Scripts", "code")
local VisualsTab = Window:CreateTab("Visuals", "eye")

local ESPEnabled = false
local ESPTeamCheck = false
local ESPBoxes = {}
local ESPNames = {}
local ESPHealth = {}

local function CreateESP(player)
    if player == game.Players.LocalPlayer then return end
    
    local character = player.Character or player.CharacterAdded:Wait()
    
    local function createESPInstance()
        if not character or not character:FindFirstChild("HumanoidRootPart") then return end
        
        local Box = Drawing.new("Square")
        Box.Visible = false
        Box.Color = Color3.new(1, 0, 0)
        Box.Thickness = 2
        Box.Transparency = 1
        Box.Filled = false
        
        local Name = Drawing.new("Text")
        Name.Visible = false
        Name.Color = Color3.new(1, 1, 1)
        Name.Size = 13
        Name.Center = true
        Name.Outline = true
        
        local Health = Drawing.new("Text")
        Health.Visible = false
        Health.Color = Color3.new(1, 1, 1)
        Health.Size = 13
        Health.Center = true
        Health.Outline = true
        
        ESPBoxes[player] = Box
        ESPNames[player] = Name
        ESPHealth[player] = Health
        
        local function updateESP()
            if not ESPEnabled or not character or not character:FindFirstChild("HumanoidRootPart") then
                Box.Visible = false
                Name.Visible = false
                Health.Visible = false
                return
            end
            
            if ESPTeamCheck and player.Team == game.Players.LocalPlayer.Team then
                Box.Visible = false
                Name.Visible = false
                Health.Visible = false
                return
            end
            
            local humanoid = character:FindFirstChild("Humanoid")
            if not humanoid then return end
            
            local rootPart = character:FindFirstChild("HumanoidRootPart")
            if not rootPart then return end
            
            local pos, onScreen = workspace.CurrentCamera:WorldToViewportPoint(rootPart.Position)
            if not onScreen then
                Box.Visible = false
                Name.Visible = false
                Health.Visible = false
                return
            end
            
            local scaleFactor = 1 / (pos.Z * math.tan(math.rad(workspace.CurrentCamera.FieldOfView / 2))) * 1000
            local width = math.floor(40 * scaleFactor)
            local height = math.floor(60 * scaleFactor)
            local x = math.floor(pos.X - width / 2)
            local y = math.floor(pos.Y - height / 2)
            
            Box.Size = Vector2.new(width, height)
            Box.Position = Vector2.new(x, y)
            Box.Visible = true
            
            Name.Text = player.Name
            Name.Position = Vector2.new(math.floor(pos.X), math.floor(y - 20))
            Name.Visible = true
            
            Health.Text = math.floor(humanoid.Health) .. "/" .. math.floor(humanoid.MaxHealth)
            Health.Position = Vector2.new(math.floor(pos.X), math.floor(y + height + 5))
            Health.Visible = true
            
            -- Color based on health
            local healthPercent = humanoid.Health / humanoid.MaxHealth
            Box.Color = Color3.new(1 - healthPercent, healthPercent, 0)
        end
        
        game:GetService("RunService").RenderStepped:Connect(updateESP)
    end
    
    if character then
        createESPInstance()
    else
        player.CharacterAdded:Connect(function()
            character = player.Character
            createESPInstance()
        end)
    end
end

local function ClearESP()
    for player, box in pairs(ESPBoxes) do
        box:Remove()
        ESPNames[player]:Remove()
        ESPHealth[player]:Remove()
    end
    ESPBoxes = {}
    ESPNames = {}
    ESPHealth = {}
end

-- ESP Toggles
VisualsTab:CreateToggle({
    Name = "ESP",
    CurrentValue = false,
    Flag = "ESPEnabled",
    Callback = function(Value)
        ESPEnabled = Value
        if not Value then
            ClearESP()
        else
            ClearESP()
            for _, player in ipairs(game.Players:GetPlayers()) do
                CreateESP(player)
            end
        end
    end,
})

VisualsTab:CreateToggle({
    Name = "ESP Team Check",
    CurrentValue = false,
    Flag = "ESPTeamCheck",
    Callback = function(Value)
        ESPTeamCheck = Value
    end,
})

game:GetService("Players").PlayerAdded:Connect(function(player)
    if ESPEnabled then
        CreateESP(player)
    end
end)

game:GetService("Players").PlayerRemoving:Connect(function(player)
    if ESPBoxes[player] then
        ESPBoxes[player]:Remove()
        ESPNames[player]:Remove()
        ESPHealth[player]:Remove()
        ESPBoxes[player] = nil
        ESPNames[player] = nil
        ESPHealth[player] = nil
    end
end)

local Fov = Main:CreateSlider({
   Name = "Change Fov",
   Range = {0, 50},
   Increment = 1,
   Suffix = "Fovs",
   CurrentValue = 0,
   Flag = "Fov", 
   Callback = function(Value)
       local charStats = game:GetService("ReplicatedStorage").CharStats
       local playerStat = charStats:FindFirstChild(game.Players.LocalPlayer.Name)
       if playerStat then
           local fovValue = playerStat:FindFirstChild("FOVs")
           if fovValue then
               fovValue.Value.Value = Value
           end
       end
   end,
})

local FlyToggle = Main:CreateToggle({
    Name = "Fly (Press F to toggle)",
    CurrentValue = false,
    Flag = "FlyEnabled",
    Callback = function(Value)
        _G.FlyEnabled = Value
        if not Value then
            local player = game.Players.LocalPlayer
            local character = player.Character
            if character then
                local humanoid = character:FindFirstChild("Humanoid")
                local rootPart = character:FindFirstChild("HumanoidRootPart")
                if humanoid and rootPart then
                    humanoid.PlatformStand = false
                    humanoid.AutoRotate = true
                    rootPart.Velocity = Vector3.new(0, 0, 0)
                end
            end
        end
    end,
})

local FlySpeedSlider = Main:CreateSlider({
    Name = "Fly Speed",
    Range = {50, 100},
    Increment = 1,
    Suffix = "speed",
    CurrentValue = 50,
    Flag = "FlySpeed",
    Callback = function(Value)
        _G.FlySpeed = Value
    end,
})

local flySpeed = 50
local isFlying = false
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

local function toggleFlight()
    isFlying = not isFlying
    humanoid.PlatformStand = isFlying
    humanoid.AutoRotate = not isFlying
    if not isFlying then
        rootPart.Velocity = Vector3.new(0, 0, 0)
        humanoid.AutoRotate = true
    end
end

local function updateFlight(dt)
    if not isFlying or not _G.FlyEnabled then return end
    
    local camera = workspace.CurrentCamera
    local moveDir = Vector3.new(0, 0, 0)

    if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.W) then moveDir = moveDir + camera.CFrame.LookVector end
    if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.S) then moveDir = moveDir - camera.CFrame.LookVector end
    if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.A) then moveDir = moveDir - camera.CFrame.RightVector end
    if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.D) then moveDir = moveDir + camera.CFrame.RightVector end
    if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.Space) then moveDir = moveDir + Vector3.new(0, 1, 0) end
    if game:GetService("UserInputService"):IsKeyDown(Enum.KeyCode.LeftShift) then moveDir = moveDir + Vector3.new(0, -1, 0) end

    local lookDirection = Vector3.new(camera.CFrame.LookVector.X, 0, camera.CFrame.LookVector.Z).Unit
    rootPart.CFrame = CFrame.new(rootPart.Position, rootPart.Position + lookDirection)
    
    if moveDir.Magnitude > 0 then
        rootPart.Velocity = moveDir.Unit * (_G.FlySpeed or flySpeed)
    else
        rootPart.Velocity = Vector3.new(0, 0, 0)
    end
end

game:GetService("UserInputService").InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.F and _G.FlyEnabled then
        toggleFlight()
    end
end)

game:GetService("RunService").Heartbeat:Connect(updateFlight)

-- Character added event to reinitialize flight variables
player.CharacterAdded:Connect(function(newChar)
    character = newChar
    humanoid = newChar:WaitForChild("Humanoid")
    rootPart = newChar:WaitForChild("HumanoidRootPart")
    isFlying = false
end)

-- Chat Toggle
local Chat = Other:CreateToggle({
   Name = "Enable Chat",
   CurrentValue = false,
   Flag = "Chat",
   Callback = function(Value)
       if Value then
           game:GetService("TextChatService").ChatWindowConfiguration.Enabled = true
       else
           game:GetService("TextChatService").ChatWindowConfiguration.Enabled = false
       end
   end,
})

-- AimLock
local AimLock = Main:CreateToggle({
    Name = "AimLock (RMB)",
    CurrentValue = false,
    Flag = "AimLock",
    Callback = function(Value)
        _G.AimLockEnabled = Value
    end,
})

Main:CreateToggle({
    Name = "AimLock Team Check",
    CurrentValue = false,
    Flag = "AimLockTeamCheck",
    Callback = function(Value)
        TeamCheck = Value
    end,
})

local AimLockPart = "Head"
local Smoothness = 1
local MaxDistance = 1000

local UIS = game:GetService("UserInputService")
local RS = game:GetService("RunService")

local function GetClosestPlayer()
    local closestPlayer = nil
    local closestAngle = math.huge
    local localPlayer = game.Players.LocalPlayer
    local localChar = localPlayer.Character
    if not localChar then return nil end
    local localRoot = localChar:FindFirstChild("HumanoidRootPart")
    if not localRoot then return nil end
    
    local camera = workspace.CurrentCamera
    local mousePos = UIS:GetMouseLocation()
    local cameraRay = camera:ViewportPointToRay(mousePos.X, mousePos.Y)
    
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player ~= localPlayer and player.Character then
            if TeamCheck and player.Team == localPlayer.Team then continue end
            
            local targetChar = player.Character
            local targetPart = targetChar:FindFirstChild(AimLockPart)
            if targetPart then
                local distance = (localRoot.Position - targetPart.Position).Magnitude
                if distance > MaxDistance then continue end
                
                local screenPos, onScreen = camera:WorldToViewportPoint(targetPart.Position)
                if onScreen then
                    local mouseToTarget = Vector2.new(screenPos.X - mousePos.X, screenPos.Y - mousePos.Y)
                    local angle = mouseToTarget.Magnitude
                    
                    if angle < closestAngle then
                        closestAngle = angle
                        closestPlayer = player
                    end
                end
            end
        end
    end
    
    return closestPlayer
end

local function AimAt(targetPart)
    if not targetPart then return end
    local camera = workspace.CurrentCamera
    local camPos = camera.CFrame.Position
    local targetPos = targetPart.Position
    
    local currentLook = camera.CFrame.LookVector
    local desiredLook = (targetPos - camPos).Unit
    local smoothLook = currentLook:Lerp(desiredLook, Smoothness)
    
    camera.CFrame = CFrame.new(camPos, camPos + smoothLook)
end

UIS.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.UserInputType == Enum.UserInputType.MouseButton2 and _G.AimLockEnabled then
        local targetPlayer = GetClosestPlayer()
        if targetPlayer and targetPlayer.Character then
            local targetPart = targetPlayer.Character:FindFirstChild(AimLockPart)
            if targetPart then
                RS:BindToRenderStep("AimLock", Enum.RenderPriority.Input.Value + 1, function()
                    AimAt(targetPart)
                end)
            end
        end
    end
end)

UIS.InputEnded:Connect(function(input, gameProcessed)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        RS:UnbindFromRenderStep("AimLock")
    end
end)

local Button = Main:CreateButton({
   Name = "WallBang",
   Callback = function()
        game:service[[Workspace]]:FindFirstChild('Map'):FindFirstChild('Parts'):FindFirstChild('M_Parts').Parent = game:service[[Workspace]]:FindFirstChild('Characters')
   end,
})

-- FullBright Feature
local Lighting = game:GetService("Lighting")
local originalBrightness = Lighting.Brightness
local originalAmbient = Lighting.Ambient
local originalOutdoorAmbient = Lighting.OutdoorAmbient
local originalFogEnd = Lighting.FogEnd

VisualsTab:CreateToggle({
    Name = "FullBright",
    CurrentValue = false,
    Flag = "FullBrightEnabled",
    Callback = function(Value)
        if Value then
            originalBrightness = Lighting.Brightness
            originalAmbient = Lighting.Ambient
            originalOutdoorAmbient = Lighting.OutdoorAmbient
            originalFogEnd = Lighting.FogEnd
            
            Lighting.Brightness = 2
            Lighting.Ambient = Color3.new(1, 1, 1)
            Lighting.OutdoorAmbient = Color3.new(1, 1, 1)
            Lighting.FogEnd = 100000
        else
            Lighting.Brightness = originalBrightness
            Lighting.Ambient = originalAmbient
            Lighting.OutdoorAmbient = originalOutdoorAmbient
            Lighting.FogEnd = originalFogEnd
        end
    end,
})

ScriptsTab:CreateButton({
   Name = "Load DEX Explorer",
   Callback = function()
       loadstring(game:HttpGet("https://raw.githubusercontent.com/infyiff/backup/main/dex.lua"))()
       Rayfield:Notify({
           Title = "DEX Loaded",
           Content = "DEX Explorer has been successfully loaded!",
           Duration = 6.5,
           Image = 0,
           Actions = {
               Ignore = {
                   Name = "Okay",
                   Callback = function()
                   end
               },
           },
       })
   end,
})
